#!/usr/bin/env ruby
require "versionifier"

# Get the project name and the version file path
the_project = { 
  :name => Dir.pwd.split("/").last }
the_version_file = { 
  :path => Dir.pwd + "/lib/" + the_project[:name] + "/version.rb" }

# Exit if version file not found
raise ArgumentError, "Version file not found on #{the_version_file[:path]}" unless File.exists? the_version_file[:path]

# Read the current version from the version file
the_version_file[:content] = File.read the_version_file[:path]
the_matches = the_version_file[:content].match /VERSION\s+=\s+["'](\d+?\.\d+?\.\d+?)["']/

# Create a version from the data
current_version = Versionifier::Version.new the_matches[1]

instructions = <<-INST

Working on #{the_project[:name]} (#{current_version})

Usage:
  v+ 1        # 0.0.4 -> 0.0.5
  v+ 1.x      # 0.0.4 -> 0.1.4
  v+ 1.x.x    # 0.0.4 -> 1.0.4

'!' at the end of the argument resets minor version numbers:
  v+ 1.x!     # 0.0.4 -> 0.1.0
  v+ 2.x.x!   # 0.0.4 -> 2.0.0
INST

# Depending on the arguments...
unless ARGV.empty?
  the_argument = ARGV.shift
  
  # Check if argument is reset
  if the_argument.end_with? "!"
    the_argument = the_argument[0..the_argument.length-2]
    options = :reset
  else 
    options = nil
  end
  
  incrementation = 0
  which = nil
  # Check if argument is properly formed
  if matches = the_argument.match(/^(\d+)\.x\.x$|^(\d+)\.x$|^(\d+)$/)
    if matches[1]
      incrementation = matches[1].to_i
      which = :major
    elsif matches[2]
      incrementation = matches[2].to_i
      which = :regular
    elsif matches[3]
      incrementation = matches[3].to_i
      which = :minor
    end
  else
    puts "Malformed argument. Please follow usage instructions:"
    puts instructions
    Process.exit!
  end
  
  # Get the final file
  the_final_version = current_version.increment which, incrementation, options
  the_final_file = the_version_file[:content].gsub(/VERSION\s+=\s+["']\d+?\.\d+?\.\d+?["']/, "VERSION = \"#{the_final_version}\"")

  # Save the file
  File.open the_version_file[:path], "w" do |file|
    file.write the_final_file
  end

  puts "In #{the_project[:name]} (#{current_version}) "
  puts "  - Version number updated to (#{the_final_version})"

else

  # Print instructions  
  puts instructions

end
